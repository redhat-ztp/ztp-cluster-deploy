---
- name: Import spoke cluster into hub
  hosts: provisioner
  tasks:
  - name: Check if OC exists
    stat:
      path: /usr/local/bin/oc
    register: oc_path

  - name: Install OC if not present
    block:
      - name: Create temporary directory for oc
        tempfile:
          state: directory
        register: oc_directory

      - name: Download the content
        get_url:
          url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz
          dest: "{{ oc_directory.path }}/oc.tar.gz"

      - name: Extract oc binary and copy
        unarchive:
          src: "{{ oc_directory.path }}/oc.tar.gz"
          dest: /usr/local/bin/
          remote_src: yes
    when: oc_path.stat.exists == False

  - name: Create temporary directory for ACM manifests
    tempfile:
      state: directory
    register: acm_directory

  - name: Clone ACM manifests there
    git:
      repo: {{ acm_manifest_repo }}
      dest: "{{ acm_directory.path }}"

  - name: Prepare cluster Profile
    shell: "for kf in $(find {{ acm_directory.path }}/subscriptions/ -name kustomization.yaml); do oc --kubeconfig={{ kubeconfig_hub_path }} apply -k $(echo $kf | rev | cut -d'/' -f 2- | rev); done"

  - name: Import cluster to ACM
    shell: "import_cluster.sh {{ cluster_name }} {{ kubeconfig_hub_path }}"

  - name: Extract the klusterlet definition from ACM
    shell: "oc get secret/{{ cluster_name }}-import -n {{ cluster_name }} -o jsonpath={.data.crds\\\\.yaml} | base64 --decode > {{ acm_directory.path }}/crd.yaml"
    environment:
      KUBECONFIG: "{{ kubeconfig_hub_path }}"

  - name: Extract the import command from ACM
    shell: "oc get secret/{{ cluster_name }}-import -n {{ cluster_name }} -o jsonpath={.data.import\\\\.yaml} | base64 --decode > {{ acm_directory.path }}/import.yaml"
    environment:
      KUBECONFIG: "{{ kubeconfig_hub_path }}"

  - name: Apply the klusterlet definition on the spoke
    command: "oc apply -f {{ acm_directory.path }}/crd.yaml"
    environment:
      KUBECONFIG: "{{ kubeconfig_spoke_path }}"

  - name: Apply the import definition on the spoke
    command: "oc apply -f {{ acm_directory.path }}/import.yaml"
    environment:
      KUBECONFIG: "{{ kubeconfig_spoke_path }}"
